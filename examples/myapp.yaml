apiVersion: v1
data:
  tls.crt: 
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBMExTZFl6ODFmSXJhcVVVaUFNbEptV0ROT0RvalBIdDIxR2ZMeVRFZi9vbGdtQTgxCklUaGM4NTJBeHJUbkE2cFhGaXdEOU5vTGVzS2tnOGRsTlEyZnhkb1JzZ3NJZzd0S254Y0trWWpBVlBBTkxINGMKN0hRQTNVdHRBVzdWYmhYVElIOUJ4OTFNb0MvdmRDaWhPTzNORmJTVHdIdDY1TkdWZEoxdWlKVVRYekt1OW1zZAphdGMxQXh3MUpMZU5rQUxXOXA1RnV2Zkg4RzV0VDZRTUd0ckt3N0RnUC9vTFd0WWp0Sm5WU1lkQ3Zpb0hsVnIrCk9jWXVTSDRZSEgycC9vZ0IrQ1FKRnNZWlYrVWptQUh2cUVKckM2aUxxaU5oN25HbTk3VnBXc3ZQdHRsRFZicW4KdXVNNlFwazRCZmo5V1hrUkZLMm5McFFmckdDSkFpdEF4WVRqZVFJREFRQUJBb0lCQUJQOHJCTHdYM3F2SUl3ego0UE1DMDkvU3I2eWFFcnhNMVo4M1ZvS015QlBjQzZwY1VIbi9PQldqaUl6ZkQ3MmYzMG15Q3VuMHhNTXJwMDR3CmR3Nks0TGwxcmhxbktGaFhSQ2p5cjdJcXpzS0RuN3RhVTRKSWhMbXNxc0tIbnZ4MUxod3ZXN2tjaGlWVUdlSTkKcnR6eEZ5SWtRajhkaERJc0tSdzdKSFlEa3RDYnNXQjVDc3d5R0Y3cGEvdGZOZExZWG5oS25UaFg0YXJOY3paSwpSVERYWEFWT3pEeHhZV0dLeS9HYWZFc0lUZU82R1RISGhFemRVNGtJZUFreWFKOXhKOVNtaWM5Y1pMQ05SUHJpCis0SVNpeGFudHVHMi90WmZxU0xEV3NpUG9rZTF2R1RkVGZTUEY0UWE3QjFibFR5ZXZkZHhrZ2s3QWZreFFjSTQKTVJzOG9DVUNnWUVBOVVpODc3d0Z1SUZ5OTJ0OUZTVVd2bmhrVk85QWFCZ0lWOGtkQ29ZaDFTQmlmYlpPdHhOUAo0OVQ2ZW5XRnFLVy9zdG9CUFJHTUQ0WlpYc25PQ3ZlMFVtVHBMNkxmMEROWGNNcVozQytMbE9sd3ZTNTlNUGNmCmFKNzErcEg1QjBlTzNkbWFaNG1TTXBIQXZCSnNRUkxFSXRCK0RNZGF5TUwrQjNJL0hUY2tiOFVDZ1lFQTJkTEgKNzRnWUJIbXN5MGRtVktUTEpWMlU3ZlBXaVZtNWh1WG0rUGhROURsUVlidUo4MnRyNFZSVS9iVHpyNXd4bzA1WQpLN080SER3MnNFTGFJVjk5ZWwvS1hiUTNDNVd1dndXOHZMNEs3UXgrOE1kclQ0aEl5bFlvZU0vTk5pbWtyWTNzCkVhaUhuTWtySFBRS2xjaW1jOHB2Y0RIdWlQRG1vZ0swTEhpdGpDVUNnWUFSL3F3ZHltV0JDNzRyZUs5TWhkUU4KVlRmSEkyWk9QTFVmKzVrdDFIbFc4WEZJVjcrZW5zUVZxdUpWYVpuTXJaeEt1c09zZjBVUFBvUC8rRDR0Zjg2eQozTVJld2t3NU1nc1FNMHptWW5hVERpMC9NOUhyYmJYWUx4Rk11TGpVVitPYlV3T0k1UWJjdnVTczU0MFptUTdhCm53RWdYdC9DS3N3SUw5R0JpeklaSVFLQmdIZktyZDRUa0hIVm9Ldml4bXBDZnQ0N3l3M2FEZUJYa2VxWVFTQW4KSUE1UC90N2d6b3NxUnBnVFV2SjhNNUFlYkVZTmJmd0t5SFB1d1h6S0owQTNUY0NoTVorNjNwTG1iTVh0RjlFTgpDdUUzQUJEVyt6TXdGaWdBbmgxaTJzNnd0RG9tVk8rWktZdVdMcm1ybEs2dlBLdHRaei9pbGZhRjFiQy9uK3JkCkswUnBBb0dBQ3haUnQzTjhldWdNMUo2am9kaDlkRmRlN0hJY2dybmRZMEFSdGF0U0NacjljWkt1WnZaY0g2SnIKcTNtYVhlOU5Cd21ydUtpU0Rpa3VPNGE3aWpnR1huOUhCalU4SnBmaW5lRE81RkRFTmxVUU55VWxGd2hqYU45RgpreVpEQ1ArcnpYWk9mWk9yVVJoeGh5YlY3dW9MZitteVJvRnU1QmRWMkVDY2NQS2plTms9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
kind: Secret
metadata:
  name: liguanghui.pro
  namespace: default
type: kubernetes.io/tls
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: myapp
  namespace: default
spec:
  ingressClassName: nginx
  rules:
  - host: myapp.liguanghui.pro
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: myapp
            port:
              name: http
  tls:
  - hosts:
    - myapp.liguanghui.pro
    secretName: liguanghui.pro
---
apiVersion: v1
kind: Service
metadata:
  name: myapp
  namespace: default
spec:
  type: ClusterIP
  selector:
    app: myapp
    release: canary
  ports:
  - port: 80
    name: http
    targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
  namespace: default
spec:
  replicas: 5
  selector:
    matchLabels:
      app: myapp
    matchExpressions:
    - key: release
      operator: In
      values:
      - canary
  template:
    metadata:
      labels:
        app: myapp
        release: canary
    spec:
      containers:
      - name: myapp
        image: ikubernetes/myapp:v1
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tomcat
  namespace: default
spec:
  replicas: 3
  selector:
    matchExpressions:
    - key: app
      operator: In
      values:
      - tomcat
    matchLabels:
      release: stable
  template:
    metadata:
      labels:
        app: tomcat
        release: stable
    spec:
      containers:
      - name: tomcat
        image: tomcat:8.5.32-jre8-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
        # livenessProbe:
        #   httpGet:
        #     port: http
        #     path: /
        #   failureThreshold: 3
        #   successThreshold: 1
        #   initialDelaySeconds: 10
        #   periodSeconds: 10
        #   timeoutSeconds: 3
        # readinessProbe:
        #   httpGet:
        #     port: http
        #     path: /
        #   failureThreshold: 2
        #   successThreshold: 1
        #   initialDelaySeconds: 10
        #   periodSeconds: 10
        #   timeoutSeconds: 3
---
apiVersion: v1
kind: Service
metadata:
  name: tomcat
  namespace: default
spec:
  type: ClusterIP
  selector:
    app: tomcat
    release: stable
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  sessionAffinity: ClientIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tomat
  namespace: default
spec:
  rules:
  - host: tomcat.liguanghui.pro
    http:
      paths:
      - backend:
          service:
            name: tomcat
            port:
              name: http
        pathType: Prefix
        path: /